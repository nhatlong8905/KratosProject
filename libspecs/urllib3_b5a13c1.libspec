<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="urllib3" type="LIBRARY" format="ROBOT" scope="GLOBAL" namedargs="true" generated="2020-06-22T02:35:44Z" specversion="2" source="C:\Python38-32\Lib\site-packages\urllib3\__init__.py" lineno="1">
<version>1.25.9</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>urllib3 - Thread-safe connection pooling and re-using.</doc>
<kw name="Add Stderr Logger" lineno="47">
<arguments>
<arg>level=10</arg>
</arguments>
<doc>Helper for quickly adding a StreamHandler to the logger. Useful for
debugging.

Returns the handler after adding it.</doc>
</kw>
<kw name="Connection From Url" source="C:\Python38-32\Lib\site-packages\urllib3\connectionpool.py" lineno="990">
<arguments>
<arg>url</arg>
<arg>**kw</arg>
</arguments>
<doc>Given a url, return an :class:`.ConnectionPool` instance of its host.

This is a shortcut for not having to parse out the scheme, host, and port
of the url before creating an :class:`.ConnectionPool` instance.

:param url:
    Absolute URL string that must include the scheme. Port is optional.

:param \**kw:
    Passes additional parameters to the constructor of the appropriate
    :class:`.ConnectionPool`. Useful for specifying things like
    timeout, maxsize, headers, etc.

Example::

    &gt;&gt;&gt; conn = connection_from_url('http://google.com/')
    &gt;&gt;&gt; r = conn.request('GET', '/')</doc>
</kw>
<kw name="Disable Warnings" lineno="82">
<arguments>
<arg>category=&lt;class 'urllib3.exceptions.HTTPWarning'&gt;</arg>
</arguments>
<doc>Helper for quickly disabling all urllib3 warnings.</doc>
</kw>
<kw name="Encode Multipart Formdata" source="C:\Python38-32\Lib\site-packages\urllib3\filepost.py" lineno="63">
<arguments>
<arg>fields</arg>
<arg>boundary=None</arg>
</arguments>
<doc>Encode a dictionary of ``fields`` using the multipart/form-data MIME format.

:param fields:
    Dictionary of fields or list of (key, :class:`~urllib3.fields.RequestField`).

:param boundary:
    If not specified, then a random boundary will be generated using
    :func:`urllib3.filepost.choose_boundary`.</doc>
</kw>
<kw name="Get Host" source="C:\Python38-32\Lib\site-packages\urllib3\util\url.py" lineno="425">
<arguments>
<arg>url</arg>
</arguments>
<doc>Deprecated. Use :func:`parse_url` instead.</doc>
</kw>
<kw name="Make Headers" source="C:\Python38-32\Lib\site-packages\urllib3\util\request.py" lineno="18">
<arguments>
<arg>keep_alive=None</arg>
<arg>accept_encoding=None</arg>
<arg>user_agent=None</arg>
<arg>basic_auth=None</arg>
<arg>proxy_basic_auth=None</arg>
<arg>disable_cache=None</arg>
</arguments>
<doc>Shortcuts for generating request headers.

:param keep_alive:
    If ``True``, adds 'connection: keep-alive' header.

:param accept_encoding:
    Can be a boolean, list, or string.
    ``True`` translates to 'gzip,deflate'.
    List will get joined by comma.
    String will be used as provided.

:param user_agent:
    String representing the user-agent you want, such as
    "python-urllib3/0.6"

:param basic_auth:
    Colon-separated username:password string for 'authorization: basic ...'
    auth header.

:param proxy_basic_auth:
    Colon-separated username:password string for 'proxy-authorization: basic ...'
    auth header.

:param disable_cache:
    If ``True``, adds 'cache-control: no-cache' header.

Example::

    &gt;&gt;&gt; make_headers(keep_alive=True, user_agent="Batman/1.0")
    {'connection': 'keep-alive', 'user-agent': 'Batman/1.0'}
    &gt;&gt;&gt; make_headers(accept_encoding=True)
    {'accept-encoding': 'gzip,deflate'}</doc>
</kw>
<kw name="Proxy From Url" source="C:\Python38-32\Lib\site-packages\urllib3\poolmanager.py" lineno="491">
<arguments>
<arg>url</arg>
<arg>**kw</arg>
</arguments>
<doc />
</kw>
</keywordspec>